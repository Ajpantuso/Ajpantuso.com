<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>AJPantuso</title>
    <link href="http://ajpantuso.com/feed.xml" rel="self" />
    <link href="http://ajpantuso.com" />
    <id>http://ajpantuso.com/feed.xml</id>
    <author>
        <name>Andrew Pantuso</name>
        <email>ajpantuso@gmail.com</email>
    </author>
    <updated>2017-01-06T00:00:00Z</updated>
    <entry>
    <title>Project Directory Script</title>
    <link href="http://ajpantuso.com/posts/2017-01-06-projdir.html" />
    <id>http://ajpantuso.com/posts/2017-01-06-projdir.html</id>
    <published>2017-01-06T00:00:00Z</published>
    <updated>2017-01-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Here is a script for creating new Project Directories <!--more--> It can easily be modified to create more or less directories within the target project directory. The secure [-s] option will change the permissions of the project directory to protect it from others.</p>
<h2 id="script">Script</h2>
<div class="sourceCode"><table class="sourceCode bash numberLines"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
</pre></td><td class="sourceCode"><pre><code class="sourceCode bash"><span class="co">#!/bin/bash</span>

<span class="co">###################################################</span>
<span class="co">#################### projDir ######################</span>
<span class="co">###################################################</span>
<span class="co">#Inputs:                                          #</span>
<span class="co">#name - The name of the project directory         #</span>
<span class="co">#[dir] - optional target directory                #</span>
<span class="co">#Output:                                          #</span>
<span class="co">#Project directory with appropriate subdirectories#</span>
<span class="co">###################################################</span>

<span class="kw">function</span><span class="fu"> helpScript</span> <span class="kw">{</span>
<span class="fu">cat</span>&lt;&lt;EOF
projDir creates a project directory in a target directory
or the current directory if no second argument given.
Within the project directory the obj, rel, src, and test
directories are created. 

Options:

-s  secures the project directory and sub-directories
    with the following permissions rwxrw----

EOF
}

secureFlag=false

while getopts &quot;:hs&quot; opt ; do
        case <span class="va">$opt</span> in
            h) helpScript 
               exit 0 ;;
            s) secureFlag=true ;;
            \?) echo &quot;Invalid option: -<span class="va">$OPTARG</span>&quot; &gt;&amp;2
                echo &quot;Usage: <span class="kw">`</span><span class="fu">basename</span> <span class="va">$0</span><span class="kw">`</span> [OPTION] NAME [DIR]&quot;
                echo &quot;Try <span class="kw">`</span><span class="fu">basename</span> <span class="va">$0</span><span class="kw">`</span> -h for help&quot;
                exit 1 ;;
        esac
done
            
shift <span class="va">$((</span>OPTIND-1<span class="va">))</span>

if [ <span class="va">$#</span> -lt 1 ] ; then
    echo &quot;Usage: <span class="kw">`</span><span class="fu">basename</span> <span class="va">$0</span><span class="kw">`</span> [OPTION] NAME [DIR]&quot;
    echo &quot;Try <span class="kw">`</span><span class="fu">basename</span> <span class="va">$0</span><span class="kw">`</span> -h for help&quot;
    exit 2 
fi

if [ -z <span class="va">$2</span> ] ; then
    targetDir=<span class="va">$(</span><span class="bu">pwd</span><span class="va">)</span>
else
    targetDir=<span class="va">$2</span>
fi

name=<span class="va">$1</span>
cd <span class="va">$targetDir</span>

while [ -e <span class="va">$name</span> ] &amp;&amp; [ -d <span class="va">$name</span> ]
do
    echo &quot;<span class="va">$name</span> already exists&quot;
    read -p &quot;Choose a different name(y/n): &quot; ans
    case <span class="va">$ans</span> in
        [yY]*) 
            echo &quot;Please enter a new name&quot;
            read name ;;
            *) exit 3 ;;
    esac
done

mkdir <span class="va">$name</span>
cd <span class="va">$name</span>
mkdir src obj rel test
if <span class="va">$secureFlag</span> ; then
    cd ..
    chmod 760 -R <span class="va">$name</span>
fi
exit 0</code></pre></td></tr></table></div>
<hr />]]></summary>
</entry>
<entry>
    <title>Newscript Script</title>
    <link href="http://ajpantuso.com/posts/2017-01-06-newscript.html" />
    <id>http://ajpantuso.com/posts/2017-01-06-newscript.html</id>
    <published>2017-01-06T00:00:00Z</published>
    <updated>2017-01-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Here is a script for generating a script template. <!--more--></p>
<p>This script helps keep new scripts consistent and could also serve as a reference for good scripting practice.</p>
<h2 id="script">Script</h2>
<div class="sourceCode"><table class="sourceCode bash numberLines"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
</pre></td><td class="sourceCode"><pre><code class="sourceCode bash"><span class="co">#!/bin/bash</span>
<span class="co">#</span>
<span class="co"># Name: newscript</span>
<span class="co"># Author: Andrew Pantuso</span>
<span class="co"># Description:</span>
<span class="co"># Generates new scripts with heading, description, author,</span>
<span class="co"># error function, and main function</span>

<span class="co">#Globals</span>
<span class="bu">readonly</span> <span class="va">NO_NAME_GIVEN=</span>1
<span class="bu">readonly</span> <span class="va">INVALID_TARGET_DIR=</span>2
<span class="bu">readonly</span> <span class="va">FILE_EXISTS=</span>3

<span class="fu">err()</span> <span class="kw">{</span>
  <span class="bu">echo</span> <span class="st">&quot;[</span><span class="va">$(</span><span class="fu">date</span> +<span class="st">&#39;%Y-%m-%d %T %z&#39;</span><span class="va">)</span><span class="st">]: </span><span class="va">$@</span><span class="st">&quot;</span> <span class="op">&gt;&amp;2</span>
<span class="kw">}</span>

<span class="fu">display_help()</span> <span class="kw">{</span>
<span class="fu">cat</span> &lt;&lt;EOF
<span class="va">$(</span><span class="fu">basename</span> <span class="st">&quot;</span><span class="va">$0</span><span class="st">&quot;</span><span class="va">)</span> generates scripts with a standard script layout
Arguments:
NAME  - name of script to be created
[DIR] - target directory where script will be created
Options:
-d    - takes a description of the script as an argument
-a    - takes an author name of the script as an argument
-h    - displays this help script
EOF
}

###########################################################
# Breaks description into lines with a maximum length of 78
# Globals:
#   None
# Arguments:
#  description
# Returns:
#   array of lines containing description text
###########################################################
nice_description() {
  local desc
  desc=&quot;<span class="va">$1</span>&quot;
  local c
  local result
  result=&#39;&#39;

  if [[ <span class="va">${#desc}</span> -le 78 ]]; then
    result=&quot;# <span class="va">${desc}</span>&quot;
  else
    while [[ <span class="va">${#desc}</span> -gt 78 ]]; do
      for (( pos=77; pos&gt;=0; pos-- )); do
        if [[ &quot;<span class="va">${desc:${pos}:1}</span>&quot; =~ [[:space:]] ]]; then
            if [[ -z &quot;<span class="va">${result}</span>&quot; ]]; then
              result=&quot;# <span class="va">${desc:0:$((${pos}</span>+ 1 <span class="va">))}</span>&quot;
            else
              result=&quot;<span class="va">${result}</span>
# <span class="va">${desc:0:$((${pos}</span>+ 1 <span class="va">))}</span>&quot;
            fi
          desc=&quot;<span class="va">${desc:$((${pos}</span> + 1<span class="va">))}</span>&quot;
          break
        fi
        if [[ <span class="va">${pos}</span> -eq 0 ]]; then
          result=&quot;<span class="va">${result}</span>
# <span class="va">${desc}</span>&quot;
          desc=&#39;&#39;
          break
        fi
       done
     done
  fi
  result=&quot;<span class="va">${result}</span>
# <span class="va">${desc}</span>&quot;
  echo &quot;<span class="va">${result}</span>&quot;
}

####################################################
# Writes the intended script with necessary elements
# Globals:
#   None
# Arguments:
#   name
#   author
#   description
# Returns:
#   None
####################################################
write_file() {
  local name
  name=&quot;<span class="va">$1</span>&quot;
  local author
  author=&quot;<span class="va">$2</span>&quot;
  local description
  description=&quot;<span class="va">$3</span>&quot;

cat &lt;&lt;EOF &gt;&gt; &quot;<span class="va">${name}</span>&quot;
#!/bin/bash
#
# Name: <span class="va">${name}</span>
# Author: <span class="va">${author}</span>
# Description:
<span class="va">$(</span><span class="ex">nice_description</span> <span class="st">&quot;</span><span class="va">${description}</span><span class="st">&quot;</span><span class="va">)</span>

err() {
  echo &quot;[<span class="dt">\$</span>(date +&#39;%Y-%m-%d %T %z&#39;)]: <span class="dt">\$</span>@&quot; &gt;&amp;2
}

mai<span class="op">n</span><span class="kw">()</span> <span class="kw">{</span>

<span class="kw">}</span>

main &quot;<span class="dt">\$</span>@&quot;
EOF

}

main() {
  
  local name
  name=&#39;&#39;
  local targetDir
  targetDir=&quot;<span class="va">$(</span><span class="bu">pwd</span><span class="va">)</span>&quot;
  local description
  description=&#39;&#39;
  local author
  author=&quot;<span class="va">$(</span><span class="fu">whoami</span><span class="va">)</span>&quot;
  local opts
  local OPTIND

  while getopts &#39;:d:a:h&#39; opt; do
    case &quot;<span class="va">${opt}</span>&quot; in
      d) description=&quot;<span class="va">${OPTARG}</span>&quot; ;;
      a) author=&quot;<span class="va">${OPTARG}</span>&quot; ;;
      h) 
        display_help 
        exit 0
        ;;
      *)
        err &quot;Invalid option <span class="va">${opt}</span>&quot;
        echo &quot;Usage: <span class="va">$(</span><span class="fu">basename</span> <span class="st">&quot;</span><span class="va">$0</span><span class="st">&quot;</span><span class="va">)</span> [-dah] [ARGS] NAME [DIR]&quot;
        ;;
    esac
  done
  shift <span class="va">$((</span>OPTIND - 1<span class="va">))</span>

  if [[ -z &quot;<span class="va">$1</span>&quot; ]]; then
    err &quot;No script name given&quot;
    echo &quot;Try <span class="va">$(</span><span class="fu">basename</span> <span class="st">&quot;</span><span class="va">$0</span><span class="st">&quot;</span><span class="va">)</span> -h for help&quot;
    exit &quot;<span class="va">${NO_NAME_GIVEN}</span>&quot;
  fi
  name=&quot;<span class="va">$1</span>&quot;

  if [[ -n &quot;<span class="va">$2</span>&quot; ]]; then
    if [[ -d &quot;<span class="va">$2</span>&quot; ]]; then
      targetDir=&quot;<span class="va">$2</span>&quot; else
      err &quot;<span class="va">$2</span> not a directory&quot;
      echo &quot;Usage: <span class="va">$(</span><span class="fu">basename</span> <span class="st">&quot;</span><span class="va">$0</span><span class="st">&quot;</span><span class="va">)</span> [-dah] [ARGS] NAME [DIR]&quot;
      exit &quot;<span class="va">${INVALID_TARGET_DIR}</span>&quot;
    fi
  fi

  cd &quot;<span class="va">${targetDir}</span>&quot;

  if [[ -e &quot;<span class="va">${name}</span>&quot; ]]; then
    err &quot;<span class="va">${name}</span> already exists&quot;
    exit &quot;<span class="va">${FILE_EXISTS}</span>&quot;
  else
    write_file &quot;<span class="va">${name}</span>&quot; &quot;<span class="va">${author}</span>&quot; &quot;<span class="va">${description}</span>&quot;
  fi

}

main &quot;<span class="va">$@</span>&quot;</code></pre></td></tr></table></div>
<hr />]]></summary>
</entry>
<entry>
    <title>Newpost Script</title>
    <link href="http://ajpantuso.com/posts/2017-01-06-newpost.html" />
    <id>http://ajpantuso.com/posts/2017-01-06-newpost.html</id>
    <published>2017-01-06T00:00:00Z</published>
    <updated>2017-01-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This script generates new posts for this site. <!--more--></p>
<p>I generated this post with this script.</p>
<h2 id="script">Script</h2>
<div class="sourceCode"><table class="sourceCode bash numberLines"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="sourceCode"><pre><code class="sourceCode bash"><span class="co">#!/bin/bash</span>
<span class="co">#</span>
<span class="co"># Name: newpost</span>
<span class="co"># Author: Andrew Pantuso</span>
<span class="co"># Description:</span>
<span class="co"># Generates header for new markdown posts </span>

<span class="fu">err()</span> <span class="kw">{</span>
  <span class="bu">echo</span> <span class="st">&quot;[</span><span class="va">$(</span><span class="fu">date</span> +<span class="st">&#39;%Y-%m-%d %T %z&#39;</span><span class="va">)</span><span class="st">]: </span><span class="va">$@</span><span class="st">&quot;</span> <span class="op">&gt;&amp;2</span>
<span class="kw">}</span>

<span class="fu">main()</span> <span class="kw">{</span>
  <span class="kw">if [[</span> <span class="va">$#</span> <span class="ot">-lt</span> 1<span class="kw"> ]]</span>; <span class="kw">then</span>
      <span class="ex">err</span> <span class="st">&quot;Error: File name not given&quot;</span>
      <span class="bu">exit</span>
  <span class="kw">fi</span>
  
  <span class="bu">local</span> <span class="va">filename=</span><span class="st">&quot;</span><span class="va">$(</span><span class="fu">date</span> +<span class="st">&#39;%Y-%m-%d&#39;</span><span class="va">)</span><span class="st">-</span><span class="va">$1</span><span class="st">.markdown&quot;</span>

<span class="fu">cat</span> &lt;&lt;EOF &gt; &quot;<span class="va">${filename}</span>&quot;
---
title:
autho<span class="op">r</span>: <span class="ex">Andrew</span> Pantuso
photos: 
tags:
---

TEASER
&lt;!--more--&gt;
BODY
EOF

}

main &quot;<span class="va">$@</span>&quot;</code></pre></td></tr></table></div>
<hr />]]></summary>
</entry>

</feed>
